?pwr.t.test
install.packages('pwr')
?pwr.t.test
library(pwr)
?pwr.t.test
?power.t.test
power.t.test(power = .90, delta = 1, alternative = "one.sided")
power.t.test(power = .90, delta = 1, alternative = "one.sided",type="two.sample")
power.t.test(power=0.80,delta = (0.9-0.5242)sd = (0.1155+0.1383)/2,type="two.sample",a alternative = "one.sided")
power.t.test(power=0.80,delta = (0.9-0.5242),sd = (0.1155+0.1383)/2,type="two.sample",a alternative = "one.sided")
power.t.test(power=0.80,delta = (0.9-0.5242),sd = (0.1155+0.1383)/2,type="two.sample",alternative = "one.sided")
power.t.test(power=0.90,delta = (0.9-0.5242),sd = (0.1155+0.1383)/2,type="two.sample",alternative = "one.sided")
power.t.test(power=0.80,delta = (0.9725-0.4700),sd = (0.0424+0.2967)/2,type="two.sample",alternative = "one.sided")
power.t.test(power=0.90,delta = (0.9725-0.4700),sd = (0.0424+0.2967)/2,type="two.sample",alternative = "one.sided")
power.t.test(power=0.80,delta = (0.563196-0.488889),sd = (0.229321+0.318562)/2,type="two.sample",alternative = "one.sided")
power.t.test(power=0.80,delta = (0.738196-0.313889),sd = (0.17962+0.073912)/2,type="two.sample",alternative = "one.sided")
library(pwr)
pwr.t.test(d=(0.60-4.02)/((0.21+0.53)/2),n=3,sig.level=0.05,type="paired",alternative="one.sided")
?pwr.t.test
pwr.t.test(d=(0.60-4.02)/0.53,n=3,sig.level=0.05,type="paired",alternative="less")
pwr.t.test(d=(0.60-4.02)/0.53,n=3,sig.level=0.05,type="paired",alternative="greater")
pwr.t.test(d=(0.60-4.02)/0.53,n=3,sig.level=0.01,type="paired",alternative="greater")
pwr.t.test(d=(0.60-4.02)/0.53,n=3,sig.level=0.01,type="paired",alternative="less")
pwr.t.test(d=(0.60-4.02)/0.53,n=3,sig.level=0.001,type="paired",alternative="less")
pwr.t.test(d=(0.60-4.02)/0.53,n=3,sig.level=0.5,type="paired",alternative="less")
pwr.t.test(d=(0.60-4.02)/0.53,n=3,sig.level=0.1,type="paired",alternative="less")
pwr.t.test(d=(0.60-4.02)/0.53,n=3,sig.level=0.05,type="paired",alternative="less")
pwr.t.test(d=(0.60-4.02)/0.53,n=30,sig.level=0.05,type="paired",alternative="less")
pwr.t.test(d=(0.60-4.02)/0.53,n=30,sig.level=0.05,type="two.sample",alternative="less")
pwr.t.test(d=(0.60-4.02)/0.53,n=3,sig.level=0.05,type="two.sample",alternative="less")
pwr.t.test(d=(0.60-4.02)/0.53,n=3,sig.level=0.01,type="two.sample",alternative="less")
pwr.t.test(d=(4.02-0.60)/0.53,n=3,sig.level=0.05,type="two.sample",alternative="greater")
pwr.t.test(d=(4.02-0.60)/0.53,n=3,sig.level=0.01,type="two.sample",alternative="greater")
pwr.t.test(d=(4.02-0.60)/0.53,n=3,type="two.sample",alternative="greater")
pwr.t.test(d=(0.60-3.43)/0.60,n=3,sig.level=0.05,type="two.sample",alternative="less")
pwr.t.test(d=(4.45-8.62)/2.71,n=3,sig.level=0.05,type="two.sample",alternative="less")
pwr.t.test(d=(3.54-8.84)/1.07,n=3,sig.level=0.05,type="two.sample",alternative="less")
pwr.t.test(d=(1.34-3.42)/0.60,n=3,sig.level=0.05,type="two.sample",alternative="less")
pwr.t.test(d=(4.06-9.19)/2.50,n=4,sig.level=0.05,type="two.sample",alternative="less")
pwr.t.test(d=(3.59-9.66)/2.40,n=5,sig.level=0.05,type="two.sample",alternative="less")
## 解答：
mvdnorm <- function(x, mu, sigma){
#从x减去mu
x.minus.mu <- x - mu
exp.arg    <- -0.5 * sum(x.minus.mu * solve(sigma, x.minus.mu))
# det(sigma) sigma 的行列式
return( 1 / (2 * pi * sqrt(det(sigma))) * exp(exp.arg) )
}
## 问题二
## 假设二元正态分布的参数如下：
## 两个维度的平均值分别为 2， 3
# 协方差矩阵为
# 4 1
# 1 4
# 尝试用蒙特卡洛马尔科夫链 Metropolis Hastings 抽样法生成后验分布，进行10000次随机抽样，并计算随机点的接受率。
# 答： 按照题意，有
mu <- c(2 ,3)
sigma <- matrix(c(4, 1, 1, 4), nrow = 2)
# 限制sampler在空间的移动速率，数值越大，变化越快，该数值的设定待进一步讨论。
sd.proposal <- 2
## 设定模拟的次数
n <- 10000
## 生成NA组成的矩阵，用于保存模拟的结果
x <- matrix(nrow = n, ncol = 2)
# 设定sampler的初始值，假定数据点从 0, 0开始 （实际上该sampler可以从任意点开始移动）
cur.x <- c(0, 0)
# 计算给定初始值时的概率密度
cur.f <- mvdnorm(cur.x, mu, sigma)
### 蒙特卡洛马尔科夫链
n.accepted <- 0
for(i in 1:n){
new.x <- cur.x + sd.proposal * rnorm(2)  ## 随机生成x
new.f <- mvdnorm(new.x, mu, sigma)       ## 计算概率密度
if(runif(1) < new.f/cur.f){
## new.f/cur.f 概率密度的比率 和 (0,1)之间的随机数相比
## 若该比率小于随机数，则接受该点
n.accepted <- n.accepted + 1
cur.x <- new.x
cur.f <- new.f
}
x[i,] <- cur.x                            ## 将cur.x存到第i行
}
#查看接受率
n.accepted/n
#查看每个变量的随机变化情况
par(mfrow=c(2,1))
plot(x[,1], type="l", xlab="t", ylab="X_1", main="Sample path of X_1")
plot(x[,2], type="l", xlab="t", ylab="X_2", main="Sample path of X_2")
## 绘制椭圆概率密度图
library(MASS)
proline.density <- kde2d(x[,1], x[,2], h = 5)
par(mfrow = c(1, 1))
plot(x, col = "gray")
contour(proline.density, add = TRUE)
points(2,3, pch = 3)
summary(x)
rnorm(2)
new.x
new.f
?jpeg
a<-c(1,2,3,4,5,6)
a[6]
a[1,6]
a[end]
a[1:end]
a[0]
a
h2<-rnorm(1000,4)
h1<-rnorm(1000,6)
hist(h1, col=rgb(1,0,0,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”, xlab=”Variable”)
hist(h1, col=rgb(1,0,0,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”, xlab=”Variable”)
h1
hist(h1, col=rgb(1,0,0,0.5))
hist(h1, col=rgb(0,0,1,0.5))
library(mixtools)
install.packages('mixtools')
library(mixtools)
wait = faithful$waiting
wait
faithful
?normalmixEM
plot(wait)
hist(wait)
wait
mixmdl = normalmixEM(wait)
plot(mixmdl,which=2)
mixmdl
lines(density(wait), lty=2, lwd=2)
kk=c(0.100000000000000
0.100000000000000
0.400000000000000
0.400000000000000
0
0.300000000000000
0.100000000000000
0.150000000000000
0.150000000000000
0.125000000000000
0.200000000000000
0.175000000000000
1
0.800000000000000
1
1
0.950000000000000
0.850000000000000
0.800000000000000
1
0.600000000000000
1
0.400000000000000
0.800000000000000
0.800000000000000
0.900000000000000
1
0.600000000000000
0
1
0.800000000000000
1
0.100000000000000
0
0.100000000000000
1
)
kk=c(0.100000000000000,0.100000000000000,0.400000000000000,0.400000000000000,0,0.300000000000000,0.100000000000000,0.150000000000000,0.150000000000000,0.125000000000000,0.200000000000000,0.175000000000000,1,0.800000000000000,1,1,0.950000000000000,0.850000000000000,0.800000000000000,1,0.600000000000000,1,0.400000000000000,0.800000000000000,0.800000000000000,0.900000000000000,1,0.600000000000000,0,1,0.800000000000000,1,0.100000000000000,0,0.100000000000000,1)
hist(kk)
hist(kk,10)
mixmdl = normalmixEM(kk)
plot(mixmdl,which=2)
lines(density(wait), lty=2, lwd=2)
lines(density(kk), lty=2, lwd=2)
plot(mixmdl,which=2)
hist(kk,10)
plot(mixmdl,which=2)
mixmdl
kk=c(0.1,0.1,0.4,0.4,0,0.3,0.1,0.15,0.15,0.125,0.2,0.175,1.3,0.8,1.4,1.3,0.95,0.85,0.8,1,0.6,1.8,0.4,0.8,0.8,0.9,1,0.6,0,1.2,0.8,1.1,0.1,0,0.1,2.1)
mixmdl = normalmixEM(kk)
plot(mixmdl,which=2)
hist(kk,10)
hist(kk,20)
table(kk)
hist(kk,30)
?plot
?which
class(mod1)
plot(mixmdl,which=2)
plot(mixmdl,which=1)
plot(mixmdl,which=3)
plot(mixmdl,which=4)
plot(mixmdl,which=2)
mixmdl
?plot
plot(mixmdl,which=2)
plot(mixmdl$posterior)
plot(mixmdl$posterior[,2])
plot(mixmdl$posterior[,1])
plot(mixmdl)
plot(mixmdl,which=2)
hist(kk)
kk[kk>1,]=1
kk[kk>1,]
kk[kk>1]
kk[kk>1]=1
kk
hist(kk)
mixmdl = normalmixEM(kk)
plot(mixmdl)
plot(mixmdl,which=2)
?normalmixEM
barplot(table(kk))
kk=c(0.1,0.1,0.4,0.4,0,0.3,0.1,0.15,0.15,0.125,0.2,0.175,1.3,0.8,1.4,1.3,0.95,0.85,0.8,1,0.6,1.8,0.4,0.8,0.8,0.9,1,0.6,0,1.2,0.8,1.1,0.1,0,0.1,2.1)
barplot(table(kk))
kk2=table(kk)>1
kk2\
kk2
tkk=table(kk)
kk2=tkk[tkk>1]
barplot(kk2)
kk2
mixmdl = normalmixEM(kk2)
hist(kk)
kk
kk[kk>1]=1
hist(kk)
hist(kk,10)
mm=hist(kk,10)
mm
normalmixEM(mm)
mm=cbind(t(mm$breaks),t(mm$counts))
mm
mm=hist(kk,10)
mm=rbind(t(mm$breaks),t(mm$counts))
mm2=crbind(t(mm$breaks),t(mm$counts))
mm2=cbind(mm$breaks,mm$counts)
mm2
normalmixEM(mm2)
mixmdlnormalmixEM(mm2)
mixmdl=normalmixEM(mm2)
plot(mixmdl)
plot(mixmdl,which=2)
rep(0.1,8)
kk2
for i in c(1:11)
for (i in c(1:11))
}
for (i in c(1:11)) {}
for (i in c(1:11)) {}
for (i in c(1:11)) {
kk2=c(kk2,rep(mm2[i,1],mm2[i,2]))
}
kk2
kk2=c()
kk2
for (i in c(1:11)) {
kk2=c(kk2,rep(mm2[i,1],mm2[i,2]))
}
kk2
table(kk)
mm
kk
kk=c(0.1,0.1,0.4,0.4,0,0.3,0.1,0.15,0.15,0.125,0.2,0.175,1.3,0.8,1.4,1.3,0.95,0.85,0.8,1,0.6,1.8,0.4,0.8,0.8,0.9,1,0.6,0,1.2,0.8,1.1,0.1,0,0.1,2.1)
kk
table(kk)
hist(kk,10)
?normalmixEM
mixmdl=normalmixEM(kk)
plot(mixmdl,which=2)
kk2
mixmdl=normalmixEM(kk2)
plot(mixmdl,which=2)
?dput
hist(kk2)
barplot(table(kk))
mixmdl=normalmixEM(kk2,k=2)
plot(mixmdl,which=2)
?normalmixEM
?normalmixEM2comp
mixmdl=normalmixEM(kk2,mu=[0.1,0.8],k=2)
mixmdl=normalmixEM(kk2,mu=c(0.1,0.8),k=2)
plot(mixmdl,which=2)
mixmdl=normalmixEM(kk,mu=c(0.1,0.8),k=2)
plot(mixmdl,which=2)
hist(kk)
hist(kk,10)
hist(kk,20)
hist(kk,30)
hist(kk,15)
hist(kk,20)
hist(kk,10)
plot(mixmdl,which=2,breaks=20)
plot(mixmdl,which=2,breaks=30)
plot(mixmdl,which=2,breaks=10)
plot(mixmdl,which=2,breaks=15)
plot(mixmdl,which=2,breaks=20)
kk2=kk[kk<1.5]
mixmdl=normalmixEM(kk2,mu=c(0.1,0.8),k=2)
plot(mixmdl,which=2,breaks=20)
plot(mixmdl,which=2,breaks=10)
plot(mixmdl,which=2,breaks=15)
plot(mixmdl,which=2,breaks=16)
plot(mixmdl,which=2,breaks=19)
plot(mixmdl,which=2,breaks=20)
plot(mixmdl,which=2,breaks=10)
plot(mixmdl,which=2,breaks=8)
plot(mixmdl,which=2,breaks=10)
plot(mixmdl,which=2,breaks=20)
barplot(table(kk))
library('mixtools')
?normalmixEM
kk=c(0.1,0.1,0.4,0.4,0,0.3,0.1,0.15,0.15,0.125,0.2,0.175,1.3,0.8,1.4,1.3,0.95,0.85,0.8,1,0.6,1.8,0.4,0.8,0.8,0.9,1,0.6,0,1.2,0.8,1.1,0.1,0,0.1,2.1)
mixmdl=normalmixEM(kk)
library('mixtools')
mixmdl=normalmixEM(kk)
mixmdl$lambda
mixmdl$mu
mixmdl
kk=c(0.1,0.1,0.4,0.4,0,0.3,0.1,0.15,0.15,0.125,0.2,0.175,1.3,0.8,1.4,1.3,0.95,0.85,0.8,1,0.6,1.8,0.4,0.8,0.8,0.9,1,0.6,0,1.2,0.8,1.1,0.1,0,0.1,2.1)
library('mclust')
install.packages('mclust')
library('mclust')
x.gmm=Mclust(kk)
summary(x.gmm)
length(kk)
x.gmm.1<-Mclust(kk,G=1)
summary(x.gmm.1)
?LogLik
?logLik
logLik(x.gmm.1)
logLik(x.gmm)-logLik(x.gmm.1)
1-pchisq(10.22934,df=3)
?pchisq
1-pchisq(10.22934,df=5)
1-pchisq(10.22934,df=1)
?Mclust
Mclust(kk,G=3)
Mclust(kk,G=2)
Mclust(kk)
123<-Mclust(kk)
k123<-Mclust(kk)
summary(k123)
k123<-Mclust(kk,G=3)
summary(k123)
logLik(k123)
?logLik
mode(k123)
Mclust(kk)
k123<-Mclust(kk,G=2)
summary(k123)
?checkColumns
?match.arg
require(stats)
## Extends the example for 'switch'
center <- function(x, type = c("mean", "median", "trimmed")) {
type <- match.arg(type)
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
}
x <- rcauchy(10)
center(x, "t")       # Works
center(x, "med")     # Works
try(center(x, "m"))  # Error
stopifnot(identical(center(x),       center(x, "mean")),
identical(center(x, NULL), center(x, "mean")) )
## Allowing more than one match:
match.arg(c("gauss", "rect", "ep"),
c("gaussian", "epanechnikov", "rectangular", "triangular"),
several.ok = TRUE)
match.arg("gauss",c("gaussian", "epanechnikov", "rectangular", "triangular"))
match.arg("1gauss",c("gaussian", "epanechnikov", "rectangular", "triangular"))
testStatistic = c("local", "focused", "imbalance")
match.arg(testStatistic, c("local", "focused",
"imbalance"))
match.arg(c("gauss", "rect", "ep"),
c("gaussian", "epanechnikov", "rectangular", "triangular"),
several.ok = TRUE)
match.arg(c("gauss", "epanechnikov", "rectangular"),
c("gaussian", "epanechnikov", "rectangular", "triangular"),
several.ok = TRUE)
match.arg(c("local", "focused", "imbalance"), c("local", "focused", "imbalance"))
match.arg(c("gaussian", "epanechnikov", "rectangular", "triangular"), c("gaussian", "epanechnikov", "rectangular", "triangular"))
match.arg(c("gaussian", "epanechnikov", "rectangular"), c("gaussian", "epanechnikov", "rectangular", "triangular"))
match.arg(c("gaussian", "epanechni", "rectangu"), c("gaussian", "epanechnikov", "rectangular", "triangular"))
match.arg(c("gaussian", "epanechnikov", "rectangular", "triangular"), c("gaussian", "epanechnikov", "rectangular", "triangular"))
match.arg(c("gaussian"), c("gaussian", "epanechnikov", "rectangular", "triangular"))
match.arg(c("gaussian", "epanechnikov"), c("gaussian", "epanechnikov", "rectangular", "triangular"))
match.arg(c("gauss", "rect", "ep"),
+           c("gaussian", "epanechnikov", "rectangular", "triangular"),
+           several.ok = TRUE)
match.arg(c("gaussian", "epanechnikov"), c("gaussian", "epanechnikov", "rectangular", "triangular"),several.ok=TRUE)
?grep
all=[8.165586477,8.035991208,7.527973089,7.928979374,7.664692712,8.244389852,7.606653326,7.633941607,7.61959878,7.889572746,8.181958248,8.136384726,8.106844713,8.081819867,8.19733643,7.629089063,8.131169432,7.551621266,7.178980487,6.531804029,7.311640124,7.834298288,7.732374083,5.978735332,7.522379603,6.767856673,6.914636808,6.896291821,7.043654101,7.922025008,8.173231691,8.052245644,7.77061655,7.321477969,7.378709419,7.413361877,7.460989853,7.584786658,7.801501005,6.27406468,6.576273532,7.435748401]
all=c(8.165586477,8.035991208,7.527973089,7.928979374,7.664692712,8.244389852,7.606653326,7.633941607,7.61959878,7.889572746,8.181958248,8.136384726,8.106844713,8.081819867,8.19733643,7.629089063,8.131169432,7.551621266,7.178980487,6.531804029,7.311640124,7.834298288,7.732374083,5.978735332,7.522379603,6.767856673,6.914636808,6.896291821,7.043654101,7.922025008,8.173231691,8.052245644,7.77061655,7.321477969,7.378709419,7.413361877,7.460989853,7.584786658,7.801501005,6.27406468,6.576273532,7.435748401)
hist(all)
hist(all,20)
library("tigger")
?crossprod
setwd("D:/Courses/sta_model/exercises/exercise2")
gdp<-read.table("gdpgrowth.csv",sep=',',header=T)
gdp<-read.table("gdpgrowth.csv",sep=",",header=T)
gdp<-read.table("gdpgrowth.csv",sep=",",header=T,fill=T)
View(gdp)
?read.table
gdp<-read.table("gdpgrowth.csv",sep=",",header=T,fill=T,na.strings="NA")
gdp<-read.table("gdpgrowth.csv",sep=",",header=T,fill=T,na.strings="NA")
gdp<-read.csv("gdpgrowth.csv",header=T,stringsAsFactors = FALSE)
gdp<-read.table("gdpgrowth.csv",sep=",",header=T,stringsAsFactors = FALSE)
gdp<-read.csv("gdpgrowth.csv",header=T,stringsAsFactors = FALSE)
table(gdp$COUNTRY)
table(gdp$EAST)
plot(gdp$GR6096,gdp$DEF60)
?matrix
source('D:/Courses/sta_model/exercises/exercise2/exercise2_linearModel_D.R')
gdp<-read.csv("gdpgrowth.csv",header=T,stringsAsFactors = FALSE)
source('D:/Courses/sta_model/exercises/exercise2/exercise2_linearModel_D.R')
x
X
X[,1]
source('D:/Courses/sta_model/exercises/exercise2/exercise2_linearModel_D.R')
X
k
k2
source('D:/Courses/sta_model/exercises/exercise2/exercise2_linearModel_D.R')
m
t(m)
source('D:/Courses/sta_model/exercises/exercise2/exercise2_linearModel_D.R')
m2
m
t(m) %*% k %*% m
source('D:/Courses/sta_model/exercises/exercise2/exercise2_linearModel_D.R')
m2
source('D:/Courses/sta_model/exercises/exercise2/exercise2_linearModel_D.R')
plot(X[,2],y)
?abline
plot(X[,2],y)
abline(a=beta_post[1],b=beta_post[2])
abline(a=beta_post[2],b=beta_post[1],col='blue')
abline(a=beta_post[2],b=beta_post[1],col='red')
abline(a=beta_post[1],b=beta_post[2],col='red')
